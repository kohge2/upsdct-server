// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/invoice_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kohge2/upsdct-server/domain/models"
)

// MockInvoiceRepository is a mock of InvoiceRepository interface.
type MockInvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceRepositoryMockRecorder
}

// MockInvoiceRepositoryMockRecorder is the mock recorder for MockInvoiceRepository.
type MockInvoiceRepositoryMockRecorder struct {
	mock *MockInvoiceRepository
}

// NewMockInvoiceRepository creates a new mock instance.
func NewMockInvoiceRepository(ctrl *gomock.Controller) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceRepository) EXPECT() *MockInvoiceRepositoryMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockInvoiceRepository) CreateInvoice(ctx context.Context, invoice *models.Invoice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, invoice)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceRepositoryMockRecorder) CreateInvoice(ctx, invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceRepository)(nil).CreateInvoice), ctx, invoice)
}

// FindInvoicesByCompanyIDAndPaidDueDateRange mocks base method.
func (m *MockInvoiceRepository) FindInvoicesByCompanyIDAndPaidDueDateRange(ctx context.Context, companyID string, startDate, endDate *time.Time) (models.InvoiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvoicesByCompanyIDAndPaidDueDateRange", ctx, companyID, startDate, endDate)
	ret0, _ := ret[0].(models.InvoiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvoicesByCompanyIDAndPaidDueDateRange indicates an expected call of FindInvoicesByCompanyIDAndPaidDueDateRange.
func (mr *MockInvoiceRepositoryMockRecorder) FindInvoicesByCompanyIDAndPaidDueDateRange(ctx, companyID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvoicesByCompanyIDAndPaidDueDateRange", reflect.TypeOf((*MockInvoiceRepository)(nil).FindInvoicesByCompanyIDAndPaidDueDateRange), ctx, companyID, startDate, endDate)
}
