// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/partner_company_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kohge2/upsdct-server/domain/models"
)

// MockPartnerCompanyRepository is a mock of PartnerCompanyRepository interface.
type MockPartnerCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerCompanyRepositoryMockRecorder
}

// MockPartnerCompanyRepositoryMockRecorder is the mock recorder for MockPartnerCompanyRepository.
type MockPartnerCompanyRepositoryMockRecorder struct {
	mock *MockPartnerCompanyRepository
}

// NewMockPartnerCompanyRepository creates a new mock instance.
func NewMockPartnerCompanyRepository(ctrl *gomock.Controller) *MockPartnerCompanyRepository {
	mock := &MockPartnerCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockPartnerCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerCompanyRepository) EXPECT() *MockPartnerCompanyRepositoryMockRecorder {
	return m.recorder
}

// FindByPartnerCompanyID mocks base method.
func (m *MockPartnerCompanyRepository) FindByPartnerCompanyID(ctx context.Context, partnerCompanyID string) (*models.PartnerCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPartnerCompanyID", ctx, partnerCompanyID)
	ret0, _ := ret[0].(*models.PartnerCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPartnerCompanyID indicates an expected call of FindByPartnerCompanyID.
func (mr *MockPartnerCompanyRepositoryMockRecorder) FindByPartnerCompanyID(ctx, partnerCompanyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPartnerCompanyID", reflect.TypeOf((*MockPartnerCompanyRepository)(nil).FindByPartnerCompanyID), ctx, partnerCompanyID)
}

// FindPartnerCompanyEmbedListByPartnerCompanyIDs mocks base method.
func (m *MockPartnerCompanyRepository) FindPartnerCompanyEmbedListByPartnerCompanyIDs(ctx context.Context, partnerCompanyIDs []string) (models.PartnerCompanyEmbedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPartnerCompanyEmbedListByPartnerCompanyIDs", ctx, partnerCompanyIDs)
	ret0, _ := ret[0].(models.PartnerCompanyEmbedList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPartnerCompanyEmbedListByPartnerCompanyIDs indicates an expected call of FindPartnerCompanyEmbedListByPartnerCompanyIDs.
func (mr *MockPartnerCompanyRepositoryMockRecorder) FindPartnerCompanyEmbedListByPartnerCompanyIDs(ctx, partnerCompanyIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPartnerCompanyEmbedListByPartnerCompanyIDs", reflect.TypeOf((*MockPartnerCompanyRepository)(nil).FindPartnerCompanyEmbedListByPartnerCompanyIDs), ctx, partnerCompanyIDs)
}
