// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/invoice_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kohge2/upsdct-server/domain/models"
)

// MockInvoiceUseCase is a mock of InvoiceUseCase interface.
type MockInvoiceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceUseCaseMockRecorder
}

// MockInvoiceUseCaseMockRecorder is the mock recorder for MockInvoiceUseCase.
type MockInvoiceUseCaseMockRecorder struct {
	mock *MockInvoiceUseCase
}

// NewMockInvoiceUseCase creates a new mock instance.
func NewMockInvoiceUseCase(ctrl *gomock.Controller) *MockInvoiceUseCase {
	mock := &MockInvoiceUseCase{ctrl: ctrl}
	mock.recorder = &MockInvoiceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceUseCase) EXPECT() *MockInvoiceUseCaseMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockInvoiceUseCase) CreateInvoice(paymentAmount int, partnerCompanyID, userID string, invoiceDueDate, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", paymentAmount, partnerCompanyID, userID, invoiceDueDate, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceUseCaseMockRecorder) CreateInvoice(paymentAmount, partnerCompanyID, userID, invoiceDueDate, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceUseCase)(nil).CreateInvoice), paymentAmount, partnerCompanyID, userID, invoiceDueDate, now)
}

// GetInvoices mocks base method.
func (m *MockInvoiceUseCase) GetInvoices(userID string, startDate, endDate *time.Time) (models.InvoiceList, models.PartnerCompanyEmbedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoices", userID, startDate, endDate)
	ret0, _ := ret[0].(models.InvoiceList)
	ret1, _ := ret[1].(models.PartnerCompanyEmbedList)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInvoices indicates an expected call of GetInvoices.
func (mr *MockInvoiceUseCaseMockRecorder) GetInvoices(userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoices", reflect.TypeOf((*MockInvoiceUseCase)(nil).GetInvoices), userID, startDate, endDate)
}
